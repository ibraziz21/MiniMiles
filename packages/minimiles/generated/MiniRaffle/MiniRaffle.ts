// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ParticipantJoined extends ethereum.Event {
  get params(): ParticipantJoined__Params {
    return new ParticipantJoined__Params(this);
  }
}

export class ParticipantJoined__Params {
  _event: ParticipantJoined;

  constructor(event: ParticipantJoined) {
    this._event = event;
  }

  get roundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RaffleClosed extends ethereum.Event {
  get params(): RaffleClosed__Params {
    return new RaffleClosed__Params(this);
  }
}

export class RaffleClosed__Params {
  _event: RaffleClosed;

  constructor(event: RaffleClosed) {
    this._event = event;
  }

  get roundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RandomnessRequested extends ethereum.Event {
  get params(): RandomnessRequested__Params {
    return new RandomnessRequested__Params(this);
  }
}

export class RandomnessRequested__Params {
  _event: RandomnessRequested;

  constructor(event: RandomnessRequested) {
    this._event = event;
  }

  get roundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get witnetBlock(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoundCreated extends ethereum.Event {
  get params(): RoundCreated__Params {
    return new RoundCreated__Params(this);
  }
}

export class RoundCreated__Params {
  _event: RoundCreated;

  constructor(event: RoundCreated) {
    this._event = event;
  }

  get roundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rewardPool(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get rewardToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get maxTickets(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get ticketCostPoints(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class WinnerSelected extends ethereum.Event {
  get params(): WinnerSelected__Params {
    return new WinnerSelected__Params(this);
  }
}

export class WinnerSelected__Params {
  _event: WinnerSelected;

  constructor(event: WinnerSelected) {
    this._event = event;
  }

  get roundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MiniRaffle__getActiveRoundResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address,
    value6: BigInt,
    value7: BigInt,
    value8: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getRoundId(): BigInt {
    return this.value0;
  }

  getStartTime(): BigInt {
    return this.value1;
  }

  getEndTime(): BigInt {
    return this.value2;
  }

  getMaxTickets(): BigInt {
    return this.value3;
  }

  getTotalTickets(): BigInt {
    return this.value4;
  }

  getRewardToken(): Address {
    return this.value5;
  }

  getRewardPool(): BigInt {
    return this.value6;
  }

  getTicketCostPoints(): BigInt {
    return this.value7;
  }

  getWinnerSelected(): boolean {
    return this.value8;
  }
}

export class MiniRaffle extends ethereum.SmartContract {
  static bind(address: Address): MiniRaffle {
    return new MiniRaffle("MiniRaffle", address);
  }

  RNG(): Address {
    let result = super.call("RNG", "RNG():(address)", []);

    return result[0].toAddress();
  }

  try_RNG(): ethereum.CallResult<Address> {
    let result = super.tryCall("RNG", "RNG():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cUSD(): Address {
    let result = super.call("cUSD", "cUSD():(address)", []);

    return result[0].toAddress();
  }

  try_cUSD(): ethereum.CallResult<Address> {
    let result = super.tryCall("cUSD", "cUSD():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getActiveRound(_roundId: BigInt): MiniRaffle__getActiveRoundResult {
    let result = super.call(
      "getActiveRound",
      "getActiveRound(uint256):(uint256,uint256,uint256,uint32,uint32,address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_roundId)],
    );

    return new MiniRaffle__getActiveRoundResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean(),
    );
  }

  try_getActiveRound(
    _roundId: BigInt,
  ): ethereum.CallResult<MiniRaffle__getActiveRoundResult> {
    let result = super.tryCall(
      "getActiveRound",
      "getActiveRound(uint256):(uint256,uint256,uint256,uint32,uint32,address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_roundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MiniRaffle__getActiveRoundResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean(),
      ),
    );
  }

  miles(): Address {
    let result = super.call("miles", "miles():(address)", []);

    return result[0].toAddress();
  }

  try_miles(): ethereum.CallResult<Address> {
    let result = super.tryCall("miles", "miles():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  miniPoints(): Address {
    let result = super.call("miniPoints", "miniPoints():(address)", []);

    return result[0].toAddress();
  }

  try_miniPoints(): ethereum.CallResult<Address> {
    let result = super.tryCall("miniPoints", "miniPoints():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  roundIdCounter(): BigInt {
    let result = super.call("roundIdCounter", "roundIdCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_roundIdCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "roundIdCounter",
      "roundIdCounter():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdt(): Address {
    let result = super.call("usdt", "usdt():(address)", []);

    return result[0].toAddress();
  }

  try_usdt(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdt", "usdt():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _miniPoints(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _cUSD(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _usdt(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloseRaffleCall extends ethereum.Call {
  get inputs(): CloseRaffleCall__Inputs {
    return new CloseRaffleCall__Inputs(this);
  }

  get outputs(): CloseRaffleCall__Outputs {
    return new CloseRaffleCall__Outputs(this);
  }
}

export class CloseRaffleCall__Inputs {
  _call: CloseRaffleCall;

  constructor(call: CloseRaffleCall) {
    this._call = call;
  }

  get _roundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseRaffleCall__Outputs {
  _call: CloseRaffleCall;

  constructor(call: CloseRaffleCall) {
    this._call = call;
  }
}

export class CreateRaffleRoundCall extends ethereum.Call {
  get inputs(): CreateRaffleRoundCall__Inputs {
    return new CreateRaffleRoundCall__Inputs(this);
  }

  get outputs(): CreateRaffleRoundCall__Outputs {
    return new CreateRaffleRoundCall__Outputs(this);
  }
}

export class CreateRaffleRoundCall__Inputs {
  _call: CreateRaffleRoundCall;

  constructor(call: CreateRaffleRoundCall) {
    this._call = call;
  }

  get _startTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _maxTickets(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _rewardPool(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _ticketCostPoints(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreateRaffleRoundCall__Outputs {
  _call: CreateRaffleRoundCall;

  constructor(call: CreateRaffleRoundCall) {
    this._call = call;
  }
}

export class DrawWinnerCall extends ethereum.Call {
  get inputs(): DrawWinnerCall__Inputs {
    return new DrawWinnerCall__Inputs(this);
  }

  get outputs(): DrawWinnerCall__Outputs {
    return new DrawWinnerCall__Outputs(this);
  }
}

export class DrawWinnerCall__Inputs {
  _call: DrawWinnerCall;

  constructor(call: DrawWinnerCall) {
    this._call = call;
  }

  get _roundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DrawWinnerCall__Outputs {
  _call: DrawWinnerCall;

  constructor(call: DrawWinnerCall) {
    this._call = call;
  }
}

export class JoinRaffleCall extends ethereum.Call {
  get inputs(): JoinRaffleCall__Inputs {
    return new JoinRaffleCall__Inputs(this);
  }

  get outputs(): JoinRaffleCall__Outputs {
    return new JoinRaffleCall__Outputs(this);
  }
}

export class JoinRaffleCall__Inputs {
  _call: JoinRaffleCall;

  constructor(call: JoinRaffleCall) {
    this._call = call;
  }

  get _roundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ticketCount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class JoinRaffleCall__Outputs {
  _call: JoinRaffleCall;

  constructor(call: JoinRaffleCall) {
    this._call = call;
  }
}

export class RequestRoundRandomnessCall extends ethereum.Call {
  get inputs(): RequestRoundRandomnessCall__Inputs {
    return new RequestRoundRandomnessCall__Inputs(this);
  }

  get outputs(): RequestRoundRandomnessCall__Outputs {
    return new RequestRoundRandomnessCall__Outputs(this);
  }
}

export class RequestRoundRandomnessCall__Inputs {
  _call: RequestRoundRandomnessCall;

  constructor(call: RequestRoundRandomnessCall) {
    this._call = call;
  }

  get _roundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RequestRoundRandomnessCall__Outputs {
  _call: RequestRoundRandomnessCall;

  constructor(call: RequestRoundRandomnessCall) {
    this._call = call;
  }
}
